# Generated by Django 2.2.4 on 2019-12-06 02:38

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc
import martor.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Emission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('slug', models.SlugField()),
                ('description', models.CharField(max_length=500)),
                ('cover', models.ImageField(null=True, upload_to='uploads/images/2019/12/06/')),
            ],
        ),
        migrations.CreateModel(
            name='Hero',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('portrait', models.CharField(max_length=100)),
                ('portrait_lg', models.CharField(max_length=100)),
                ('portrait_full', models.CharField(max_length=100)),
                ('portrait_vert', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('cost', models.IntegerField()),
                ('secret_shop', models.BooleanField()),
                ('recipe', models.BooleanField()),
                ('image', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='PatchVersion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_number', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('status', models.BooleanField(default=False)),
                ('starting_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('ending_date', models.DateTimeField(default=datetime.datetime(2020, 2, 14, 2, 38, 11, 135495, tzinfo=utc))),
                ('victory_points', models.IntegerField(default=2)),
                ('draw_points', models.IntegerField(default=1)),
                ('loss_points', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(default=django.utils.timezone.now)),
                ('end', models.DateTimeField(default=datetime.datetime(2019, 12, 13, 2, 38, 11, 137229, tzinfo=utc))),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Division')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('tag', models.CharField(blank=True, max_length=6)),
                ('status', models.BooleanField(default=True)),
                ('creation_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('recruiting', models.BooleanField(default=False)),
                ('captain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Standings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(blank=True, default=1, null=True, verbose_name='Position')),
                ('matches', models.IntegerField(blank=True, default=0, null=True, verbose_name='Matches')),
                ('win', models.IntegerField(default=0, null=True, verbose_name='Won')),
                ('draw', models.IntegerField(default=0, null=True, verbose_name='Draw')),
                ('lost', models.IntegerField(default=0, null=True, verbose_name='Lost')),
                ('points', models.IntegerField(default=0, null=True, verbose_name='Points')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Division')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Team')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('text', martor.models.MartorField()),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('published_date', models.DateTimeField(blank=True, null=True)),
                ('category', models.CharField(max_length=50, null=True)),
                ('cover', models.ImageField(null=True, upload_to='uploads/images/2019/12/06/')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('play_date', models.DateTimeField(null=True)),
                ('suggested_date_1', models.DateTimeField(null=True)),
                ('suggested_date_2', models.DateTimeField(null=True)),
                ('played', models.BooleanField(default=False)),
                ('games', models.IntegerField(default=2)),
                ('team_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_1', to='www.Team')),
                ('team_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_2', to='www.Team')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Week')),
                ('winner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='www.Team')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Match')),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Team')),
            ],
        ),
        migrations.CreateModel(
            name='EmissionSubmission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60)),
                ('done', models.BooleanField(default='FALSE')),
                ('description', models.CharField(max_length=500)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(default=0, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('downvotes', models.ManyToManyField(related_name='_emissionsubmission_downvotes_+', to=settings.AUTH_USER_MODEL)),
                ('emission', models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='www.Emission')),
                ('patch_version', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.PatchVersion')),
                ('upvotes', models.ManyToManyField(related_name='_emissionsubmission_upvotes_+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='division',
            name='season',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.CASCADE, to='www.Season'),
        ),
        migrations.AddField(
            model_name='division',
            name='team',
            field=models.ManyToManyField(to='www.Team'),
        ),
        migrations.CreateModel(
            name='VingtkmmrSubmission',
            fields=[
                ('emissionsubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='www.EmissionSubmission')),
                ('hero_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hero_1', to='www.Hero')),
                ('hero_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hero_2', to='www.Hero')),
            ],
            bases=('www.emissionsubmission',),
        ),
        migrations.CreateModel(
            name='TaymaputeSubmission',
            fields=[
                ('emissionsubmission_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='www.EmissionSubmission')),
                ('hero', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='www.Hero')),
                ('item_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_1', to='www.Item')),
                ('item_2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_2', to='www.Item')),
                ('item_3', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_3', to='www.Item')),
                ('item_4', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_4', to='www.Item')),
                ('item_5', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_5', to='www.Item')),
                ('item_6', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_6', to='www.Item')),
            ],
            bases=('www.emissionsubmission',),
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('steam_id', models.IntegerField(null=True)),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='www.Team')),
            ],
        ),
    ]
